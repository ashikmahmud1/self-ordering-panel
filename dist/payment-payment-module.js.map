{"version":3,"sources":["webpack:///./src/app/payment/payment-form/payment-form.component.css","webpack:///./src/app/payment/payment-form/payment-form.component.html","webpack:///./src/app/payment/payment-form/payment-form.component.ts","webpack:///./src/app/payment/payment-list/payment-list.component.css","webpack:///./src/app/payment/payment-list/payment-list.component.html","webpack:///./src/app/payment/payment-list/payment-list.component.ts","webpack:///./src/app/payment/payment-routing.module.ts","webpack:///./src/app/payment/payment.module.ts"],"names":[],"mappings":";;;;;;;;;AAAA,mB;;;;;;;;;;;ACAA,s/BAAs/B,WAAW,06G;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA/8B;AAGY;AACrB;AACc;AAOvD;IA8BE,8BAAmB,MAAwB,EACxB,MAAqB,EACrB,KAAoB,EACpB,MAAa;QAHb,WAAM,GAAN,MAAM,CAAkB;QACxB,WAAM,GAAN,MAAM,CAAe;QACrB,UAAK,GAAL,KAAK,CAAe;QACpB,WAAM,GAAN,MAAM,CAAO;QA9BhC,gBAAW,GAAG;YACZ,EAAC,EAAE,EAAC,CAAC,EAAE,IAAI,EAAC,QAAQ,EAAC;YACrB,EAAC,EAAE,EAAC,CAAC,EAAE,IAAI,EAAC,QAAQ,EAAC;YACrB,EAAC,EAAE,EAAC,CAAC,EAAE,IAAI,EAAC,MAAM,EAAC;SACpB,CAAC;QACF,YAAO,GAAgB;YACrB,SAAS,EAAE;gBACT,SAAS,EAAE;oBACT,UAAU,EAAE,KAAK;oBACjB,QAAQ,EAAE,KAAK;oBACf,UAAU,EAAE,KAAK;iBAClB;gBACD,OAAO,EAAC;oBACN,GAAG,EAAC,CAAC;oBACL,GAAG,EAAC,CAAC;iBACN;aACF;YACD,IAAI,EAAC,EAAE;YACP,MAAM,EAAC;gBACL,EAAE,EAAC,EAAE;gBACL,GAAG,EAAC,EAAE;gBACN,IAAI,EAAC,EAAE;aACR;YACD,MAAM,EAAC;gBACL,QAAQ,EAAC,EAAE;aACZ;SACF,CAAC;IAIkC,CAAC;IAErC,uCAAQ,GAAR;QAAA,iBAOC;QANC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACxD,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,aAAW,IAAI,CAAC,SAAW,CAAC,CAAC,SAAS,CAAC,UAAC,WAAyB;gBAChF,KAAI,CAAC,OAAO,GAAG,WAAW,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IACD,yCAAU,GAAV,UAAW,WAAkB;QAE3B,2BAA2B;QAE3B,gDAAgD;QAChD,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,EAAC;YAClB,oBAAoB;YACpB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,aAAW,IAAI,CAAC,SAAW,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YAC3D,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,iBAAiB,EAAE,UAAU,CAAC,CAAC;QACrD,CAAC;QACD,IAAI,CAAC,CAAC;YACJ,mBAAmB;YACnB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YACzC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC;QACnD,CAAC;QACD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,EAAE,EAAE,UAAU,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC;IAE7D,CAAC;IA5DU,oBAAoB;QALhC,+DAAS,CAAC;YACT,QAAQ,EAAE,kBAAkB;;;SAG7B,CAAC;yCA+B2B,wEAAgB;YAChB,wDAAa;YACf,8DAAc;YACb,sDAAM;OAjCrB,oBAAoB,CA8DhC;IAAD,2BAAC;CAAA;AA9DgC;;;;;;;;;;;;ACZjC,mB;;;;;;;;;;;ACAA,+UAA+U,oXAAoX,gBAAgB,6lB;;;;;;;;;;;;;;;;;;;;;;;;;ACAjqB;AACY;AAS9D;IAGE,8BAAmB,MAAuB;QAAvB,WAAM,GAAN,MAAM,CAAiB;IAAI,CAAC;IAE/C,uCAAQ,GAAR;QACE,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;IACxD,CAAC;IAPU,oBAAoB;QALhC,+DAAS,CAAC;YACT,QAAQ,EAAE,kBAAkB;;;SAG7B,CAAC;yCAI0B,wEAAgB;OAH/B,oBAAoB,CAShC;IAAD,2BAAC;CAAA;AATgC;;;;;;;;;;;;;;;;;;;;;;;;;ACVQ;AACc;AACoB;AACA;AAE3E,IAAM,MAAM,GAAW;IACrB,EAAC,IAAI,EAAC,EAAE,EAAE,SAAS,EAAC,yFAAoB,EAAC;IACzC,EAAC,IAAI,EAAC,SAAS,EAAC,SAAS,EAAC,yFAAoB,EAAC;IAC/C,EAAC,IAAI,EAAC,UAAU,EAAC,SAAS,EAAC,yFAAoB,EAAC;CAEjD,CAAC;AAMF;IAAA;IAAoC,CAAC;IAAxB,oBAAoB;QAJhC,8DAAQ,CAAC;YACR,OAAO,EAAE,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YACxC,OAAO,EAAE,CAAC,4DAAY,CAAC;SACxB,CAAC;OACW,oBAAoB,CAAI;IAAD,2BAAC;CAAA;AAAJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBQ;AACM;AAEiB;AACa;AAClC;AACQ;AACb;AACe;AACD;AACyB;AAc7E;IAAA;IAA6B,CAAC;IAAjB,aAAa;QAZzB,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,0DAAW;gBACX,qDAAW;gBACX,4DAAY;gBACZ,gEAAY;gBACZ,mEAAc;gBACd,oEAAS;gBACT,4EAAoB;aACrB;YACD,YAAY,EAAE,CAAC,yFAAoB,EAAE,yFAAoB,CAAC;SAC3D,CAAC;OACW,aAAa,CAAI;IAAD,oBAAC;CAAA;AAAJ","file":"payment-payment-module.js","sourcesContent":["module.exports = \"\"","module.exports = \"<div class=\\\"row page-titles text-center\\\">\\n  <div class=\\\"col-12\\\">\\n    <h1 class=\\\"text-center title\\\" *ngIf=\\\"!paymentId\\\">Add Menu</h1>\\n    <h1 class=\\\"text-center title\\\" *ngIf=\\\"paymentId\\\">Edit Menu</h1>\\n  </div>\\n</div>\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-sm-12\\\">\\n    <form class=\\\"form-horizontal\\\" id=\\\"paymentForm\\\" #PaymentForm=\\\"ngForm\\\" (ngSubmit)=\\\"addPayment(PaymentForm)\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-sm-3\\\"></div>\\n        <div class=\\\"col-sm-6\\\">\\n          <div class=\\\"card\\\">\\n            <div class=\\\"card-body\\\">\\n              <div class=\\\"gateway\\\">\\n                <h3 class=\\\"custom-heading\\\">Gateway</h3>\\n                <div class=\\\"form-group\\\">\\n                  <label for=\\\"payment-type\\\">Payment Type</label>\\n                  <select [(ngModel)]=\\\"payment.type\\\" class=\\\"form-control\\\" id=\\\"payment-type\\\" name=\\\"payment-type\\\">\\n                    <option *ngFor=\\\"let type of paymentType\\\" [ngValue]=\\\"type.name\\\">{{type.name}}</option>\\n                  </select>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                  <label for=\\\"salt\\\">Salt</label>\\n                  <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"salt\\\" name=\\\"salt\\\" required [(ngModel)]=\\\"payment.config.salt\\\">\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                  <label for=\\\"key\\\">Key</label>\\n                  <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"key\\\" name=\\\"key\\\" required [(ngModel)]=\\\"payment.config.key\\\">\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                  <label for=\\\"username\\\">Currency</label>\\n                  <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"username\\\" name=\\\"username\\\" required [(ngModel)]=\\\"payment.others.currency\\\">\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                  <label for=\\\"min-amount\\\">Minimum Order Amount</label>\\n                  <input type=\\\"number\\\" class=\\\"form-control\\\" id=\\\"min-amount\\\" name=\\\"min-amount\\\" required [(ngModel)]=\\\"payment.condition.ordAmnt.min\\\">\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                  <label for=\\\"max-amount\\\">Maximum Order Amount</label>\\n                  <input type=\\\"number\\\" class=\\\"form-control\\\" id=\\\"max-amount\\\" name=\\\"max-amount\\\" required [(ngModel)]=\\\"payment.condition.ordAmnt.max\\\">\\n                </div>\\n              </div>\\n              <br>\\n              <div class=\\\"apply-for\\\">\\n                <h3 class=\\\"custom-heading\\\">Apply For</h3>\\n                <div class=\\\"form-check\\\">\\n                  <input type=\\\"checkbox\\\" [(ngModel)]=\\\"payment.condition.applyType.isDelivery\\\" (change)=\\\"payment.condition.applyType.isDelivery != payment.condition.applyType.isDelivery\\\"   name=\\\"enable-delivery\\\" class=\\\"form-check-input\\\" id=\\\"enable-delivery\\\">\\n                  <label class=\\\"form-check-label\\\" for=\\\"enable-delivery\\\">Enable Delivery</label>\\n                </div>\\n                <div class=\\\"form-check\\\">\\n                  <input type=\\\"checkbox\\\" [(ngModel)]=\\\"payment.condition.applyType.isPickup\\\" (change)=\\\"payment.condition.applyType.isPickup != payment.condition.applyType.isPickup\\\"  name=\\\"enable-pick-up\\\" class=\\\"form-check-input\\\" id=\\\"enable-pick-up\\\">\\n                  <label class=\\\"form-check-label\\\" for=\\\"enable-pick-up\\\">Enable PickUp</label>\\n                </div>\\n                <div class=\\\"form-check\\\">\\n                  <input type=\\\"checkbox\\\" [(ngModel)]=\\\"payment.condition.applyType.isTableRes\\\" (change)=\\\"payment.condition.applyType.isTableRes != payment.condition.applyType.isTableRes\\\" name=\\\"table-reservation\\\" class=\\\"form-check-input\\\" id=\\\"table-reservation\\\">\\n                  <label class=\\\"form-check-label\\\" for=\\\"table-reservation\\\">Table Reservation</label>\\n                </div>\\n              </div>\\n              <br>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"text-center\\\">\\n        <button type=\\\"submit\\\" class=\\\"btn btn-lg btn-success waves-effect waves-light m-r-10\\\" *ngIf=\\\"paymentId\\\">Update</button>\\n        <button type=\\\"submit\\\" class=\\\"btn btn-lg btn-success waves-effect waves-light m-r-10\\\" *ngIf=\\\"!paymentId\\\">Submit</button>\\n        <button type=\\\"button\\\" class=\\\"btn btn-lg btn-inverse waves-effect waves-light\\\" [routerLink]=\\\"['../..']\\\">Cancel</button>\\n      </div>\\n    </form>\\n  </div>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport {PaymentModel} from \"../payment.model\";\nimport {NgForm} from \"@angular/forms\";\nimport {FirestoreService} from \"../../core/firestore.service\";\nimport {ToastrService} from \"ngx-toastr\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\n\n@Component({\n  selector: 'app-payment-form',\n  templateUrl: './payment-form.component.html',\n  styleUrls: ['./payment-form.component.css']\n})\nexport class PaymentFormComponent implements OnInit {\n\n  paymentId:any;\n  paymentType = [\n    {id:1, name:\"Paypal\"},\n    {id:2, name:\"Stripe\"},\n    {id:3, name:\"Cash\"}\n  ];\n  payment:PaymentModel = {\n    condition: {\n      applyType: {\n        isDelivery: false,\n        isPickup: false,\n        isTableRes: false\n      },\n      ordAmnt:{\n        min:0,\n        max:0\n      }\n    },\n    type:'',\n    config:{\n      id:'',\n      key:'',\n      salt:''\n    },\n    others:{\n      currency:''\n    }\n  };\n  constructor(public fireDB: FirestoreService,\n              public toastr: ToastrService,\n              public route:ActivatedRoute,\n              public router:Router) { }\n\n  ngOnInit() {\n    this.paymentId = this.route.snapshot.paramMap.get('id');\n    if (this.paymentId) {\n      this.fireDB.doc$(`payment/${this.paymentId}`).subscribe((paymentData: PaymentModel) => {\n        this.payment = paymentData;\n      });\n    }\n  }\n  addPayment(paymentForm:NgForm) {\n\n    //validate the payment form\n\n    //check already the payment method exist or not.\n    if (this.paymentId){\n      //update the payment\n      this.fireDB.set(`payment/${this.paymentId}`, this.payment);\n      this.toastr.success('Payment Updated', 'Success!');\n    }\n    else {\n      //add a new payment\n      this.fireDB.add(`payment`, this.payment);\n      this.toastr.success('Payment Added', 'Success!');\n    }\n    this.router.navigate(['../..'], { relativeTo: this.route })\n\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-2\\\"></div>\\n  <div class=\\\"col-lg-8\\\">\\n    <div class=\\\"card\\\">\\n      <div class=\\\"card-body\\\">\\n        <div class=\\\"text-center\\\">\\n          <button class=\\\"btn btn-success\\\" type=\\\"button\\\" [routerLink]=\\\"['add/new']\\\">\\n            <i class=\\\"fa fa-plus\\\"></i> &nbsp; Add Payment</button>\\n        </div>\\n        <br>\\n        <div>\\n          <table class=\\\"table table-bordered\\\">\\n            <thead>\\n            <tr>\\n              <th>Payment Type</th>\\n              <th>Actions</th>\\n            </tr>\\n            </thead>\\n            <tbody>\\n            <tr *ngFor=\\\"let payment of paymentList | async\\\">\\n              <td>{{ payment.type }}</td>\\n              <td class=\\\"actionList\\\">\\n                <button class=\\\"btn btn-sm btn-info\\\" type=\\\"button\\\" [routerLink]=\\\"['edit', payment.id]\\\">\\n                  <i class=\\\"fa fa-pencil\\\"></i>\\n                </button>\\n                <button class=\\\"btn btn-sm btn-danger\\\" type=\\\"button\\\" (click)=\\\"deleteMenu($event, payment.id)\\\">\\n                  <i class=\\\"fa fa-trash\\\"></i>\\n                </button>\\n              </td>\\n            </tr>\\n            </tbody>\\n          </table>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"col-lg-2\\\"></div>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport {FirestoreService} from \"../../core/firestore.service\";\nimport {Observable} from \"rxjs/Observable\";\nimport {PaymentModel} from \"../payment.model\";\n\n@Component({\n  selector: 'app-payment-list',\n  templateUrl: './payment-list.component.html',\n  styleUrls: ['./payment-list.component.css']\n})\nexport class PaymentListComponent implements OnInit {\n\n  paymentList:Observable<PaymentModel[]>;\n  constructor(public fireDB:FirestoreService) { }\n\n  ngOnInit() {\n    this.paymentList = this.fireDB.colWithIds$(`payment`);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport {PaymentFormComponent} from \"./payment-form/payment-form.component\";\nimport {PaymentListComponent} from \"./payment-list/payment-list.component\";\n\nconst routes: Routes = [\n  {path:'', component:PaymentListComponent},\n  {path:'add/new',component:PaymentFormComponent},\n  {path:'edit/:id',component:PaymentFormComponent}\n\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class PaymentRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { PaymentRoutingModule } from './payment-routing.module';\nimport { PaymentFormComponent } from './payment-form/payment-form.component';\nimport {FormsModule} from \"@angular/forms\";\nimport {SharedModule} from \"../core/shared.module\";\nimport {QuillModule} from \"ngx-quill\";\nimport {NgbModule} from \"@ng-bootstrap/ng-bootstrap\";\nimport {NgSelectModule} from \"@ng-select/ng-select\";\nimport { PaymentListComponent } from './payment-list/payment-list.component';\n\n@NgModule({\n  imports: [\n    FormsModule,\n    QuillModule,\n    CommonModule,\n    SharedModule,\n    NgSelectModule,\n    NgbModule,\n    PaymentRoutingModule,\n  ],\n  declarations: [PaymentFormComponent, PaymentListComponent]\n})\nexport class PaymentModule { }\n"],"sourceRoot":""}